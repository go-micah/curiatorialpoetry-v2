AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  curatorialpoetry
  SAM Template for curatorialpoetry
Globals:
  Function:
    Timeout: 5
    MemorySize: 128
Resources:
  GeneratePoem:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: cmd/functions/generatePoem/
      Runtime: provided.al2
      MemorySize: 3008
      Timeout: 120
      Tracing: Active
      Handler: bootstrap
      Policies: arn:aws:iam::aws:policy/AmazonBedrockFullAccess
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: LambdaTask
        States:
          LambdaTask:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: $
              FunctionName: ${LambdaFunction1}
            Next: DynamoDB PutItem
          DynamoDB PutItem:
            Type: Task
            Resource: arn:aws:states:::dynamodb:putItem
            Parameters:
              TableName: !Ref Poems
              Item:
                id:
                  S.$: $.Payload.Id
                poem:
                  S.$: $.Payload.Poem
                url:
                  S.$: $.Payload.Url
            End: true
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: '*'
        - LambdaInvokePolicy:
            FunctionName: !Ref GeneratePoem
      Tracing:
        Enabled: true
      Type: STANDARD
      DefinitionSubstitutions:
        LambdaFunction1: !GetAtt GeneratePoem.Arn
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/vendedlogs/states/${AWS::StackName}-${ResourceId}-Logs
        - ResourceId: StateMachine
  Poems:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPoemsFunction.Arn}/invocations
              responses: {}
          /{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPoemsFunction.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  GetPoemsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetPoemsFunction
      CodeUri: cmd/functions/getPoems/
      Runtime: provided.al2
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGET:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref Api
        ApiGETid:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          POEMS_TABLE_NAME: !Ref Poems
          POEMS_TABLE_ARN: !GetAtt Poems.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Poems
      Handler: bootstrap
  GetPoemsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetPoemsFunction}
  RebuildSiteWebhook:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RebuildSiteWebhook
      CodeUri: cmd/functions/rebuildSiteWebhook
      Runtime: provided.al2
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Handler: bootstrap
      Events:
        Poems:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt Poems.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
      Environment:
        Variables:
          AMPLIFY_WEBHOOK_URL: '{{resolve:ssm:/curatorial-poetry/amplify-webhook-url:1}}'
  RebuildSiteWebhookLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RebuildSiteWebhook}
Outputs:
  GetPoemsAPI:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/